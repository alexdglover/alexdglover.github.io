I"÷5<p>Like many DevOps professionals before me, I needed a way to manage iptables programmatically through Chef. Before I realized that Opscode had written a cookbook for just this, I had already spent some time building my own. The cookbook written by Opscode is very clever and allows you to apply a set of iptables rules with a single line in another recipe. The only problem is that it is predicated on you creating 'templates' of iptables policies you want to apply in advance, and you can only apply those templates. You can't just supply a port number or part of a rule. Additionally, their cookbook wasn't compatible with <a href="http://www.vagrantup.com/" target="_blank">Vagrant</a>Â because of the ruby binary wasn't inÂ the paths used in the cookbook.</p>
<p>Short version - I wrote my own iptables cookbook and augmented the Opscode iptables cookbook, and I wanted to share.</p>
<h2>Changes to the OpscodeÂ Cookbook</h2>
<p>Basically, the cookbook functionality is unchanged save for two parts. First, in addition to the previous method for invoking iptables, you can nowÂ invoke it by setting theÂ ['iptables']['roles']Â attribute to one or more roles (comma delimited). There is a new 'default.rb' attribute file and the default recipe has been modified slighly to support this. Second, the default recipe has been modified to detect the path to the ruby binary so as to be compatible with Vagrant boxes instead of being hardcoded.</p>
<p>You can check out all of the code on <a href="https://github.com/alexdglover/iptables" target="_blank">Github</a>.</p>
<h2>My iptables Cookbook</h2>
<p>My requirements were a little less generic, and so my iptables cookbook is a little more isolated than the Opscode version. Specifically, I didn't want to affect any existing iptables rules or chains, so my cookbook injects new chains that should be specific for the servers application (hence App-INPUT and App-OUTPUT chains).Â Unfortunately, today my cookbook onlyÂ supports ports to be specified via attributes and only works on Enterprise Linux OS's. Having seen and played with Opscode version, I'll have to refactor mine to support Debian Linux versions as well as non-attribute driven usage.</p>
<p>To see the full cookbook or to clone, check out the repo on <a href="https://github.com/alexdglover/inline-iptables" target="_blank">Github</a>. Otherwise the bulk of the logic is in the default recipe, which you can check out here:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cookbook Name:  inline-iptables</span>
<span class="c1"># Recipe:         default</span>
<span class="c1"># Author:         Alex D Glover (alex@alexdglover.com)</span>
<span class="c1"># Description:    A recipe to manage iptables without impacting existing</span>
<span class="c1">#   iptables rules or chains, and allowing individual</span>
<span class="c1">#   inbound/outbound ports as well as port ranges to be</span>
<span class="c1">#   managed with programmatic ease.</span>
<span class="c1"># Dependencies:   attributes/default.rb</span>
<span class="c1"># Usage:          Set the ["inline-iptables"]["listen_ports"] and/or</span>
<span class="c1">#   ["inline-iptables"]["outbound_ports"] attributes at the</span>
<span class="c1">#   node or role level</span>


<span class="c1"># Grab the comma separated list of ports that need to be open.</span>
<span class="c1"># Keep in mind these attribute could be set by a role, recipe, or node override</span>
<span class="n">listen_ports</span>      <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s2">"inline-iptables"</span><span class="p">][</span><span class="s2">"listen_ports"</span><span class="p">]</span>
<span class="n">outbound_ports</span>    <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="s2">"inline-iptables"</span><span class="p">][</span><span class="s2">"outbound_ports"</span><span class="p">]</span>

<span class="c1"># Boolean variable to track if we a change has been made</span>
<span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">false</span>

<span class="c1"># Debug friendly logging</span>
<span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span> <span class="o">&lt;&lt;-</span><span class="no">EOS</span><span class="sh">

Entering ondemand_base::iptables_manager {
  listen_ports        = </span><span class="si">#{</span><span class="n">listen_ports</span><span class="si">}</span><span class="sh">
  outbound_ports      = </span><span class="si">#{</span><span class="n">outbound_ports</span><span class="si">}</span><span class="sh">
}
</span><span class="no">EOS</span>

<span class="c1"># Read the current iptables data</span>
<span class="n">iptables_content</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="s2">"/etc/sysconfig/iptables"</span><span class="p">)</span>

<span class="c1"># If the list of ports is the empty string, do nothing</span>
<span class="k">unless</span> <span class="n">listen_ports</span> <span class="o">==</span> <span class="s2">""</span>

  <span class="c1"># We are creating a new iptables chain called App-INPUT; if it already</span>
  <span class="c1"># exists, don't create it again</span>
  <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">":App-INPUT - ["</span><span class="p">)</span>
    <span class="n">execute</span> <span class="s2">"create new INPUT chain"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -N App-INPUT;"</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="c1"># Break our port list into an array</span>
  <span class="n">listen_ports_array</span> <span class="o">=</span> <span class="n">listen_ports</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span>

  <span class="c1"># For each port that needs to be opened, insert the corresponding rule</span>
  <span class="c1"># into our chain, but only if doesn't exist already</span>
  <span class="n">listen_ports_array</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">port</span><span class="o">|</span>
    <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"-A App-INPUT -p tcp -m tcp --dport </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> -j ACCEPT"</span><span class="p">)</span>
      <span class="n">execute</span> <span class="s2">"add input rule to iptables for port </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2">"</span> <span class="k">do</span>
        <span class="n">command</span> <span class="s2">"iptables -I App-INPUT -p tcp --dport </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> -j ACCEPT"</span>
      <span class="k">end</span>
      <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># Connect our App-INPUT chain to the generic INPUT chain</span>
  <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"-A INPUT -j App-INPUT"</span><span class="p">)</span>
    <span class="n">execute</span> <span class="s2">"connect App-INPUT to INPUT chain"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -I INPUT -j App-INPUT"</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="c1"># Connect our App-INPUT chain to the generic FORWARD chain</span>
  <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"-A FORWARD -j App-INPUT"</span><span class="p">)</span>
    <span class="n">execute</span> <span class="s2">"connect App-INPUT to FORWARD chain"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -I FORWARD -j App-INPUT"</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

<span class="k">else</span>
  <span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span> <span class="s2">"No listen ports specified to be opened"</span>
<span class="k">end</span>

<span class="c1"># If the list of ports is the empty string, do nothing</span>
<span class="k">unless</span> <span class="n">outbound_ports</span> <span class="o">==</span> <span class="s2">""</span>

  <span class="c1"># We are creating a new iptables chain called App-OUTPUT; if it already</span>
  <span class="c1"># exists, don't create it again</span>
  <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">":App-OUTPUT - ["</span><span class="p">)</span>
    <span class="n">execute</span> <span class="s2">"create new OUTPUT chain"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -N App-OUTPUT;"</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="c1"># Break our port list into an array</span>
  <span class="n">outbound_ports_array</span> <span class="o">=</span> <span class="n">outbound_ports</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">','</span><span class="p">)</span>

  <span class="c1"># For each port that needs to be opened, insert the corresponding rule</span>
  <span class="c1"># into our chain, but only if doesn't exist already</span>
  <span class="n">outbound_ports_array</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">port</span><span class="o">|</span>
    <span class="n">execute</span> <span class="s2">"add input rule to iptables for port </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2">"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -I App-OUTPUT -p tcp --dport </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> -j ACCEPT"</span>
      <span class="n">only_if</span> <span class="p">{</span><span class="o">!</span><span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"-A App-OUTPUT -p tcp -m tcp --dport </span><span class="si">#{</span><span class="n">port</span><span class="si">}</span><span class="s2"> -j ACCEPT"</span><span class="p">)}</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

  <span class="c1"># Connect our App-OUTPUT chain to the generic OUTPUT chain</span>
  <span class="k">unless</span> <span class="n">iptables_content</span><span class="p">.</span><span class="nf">include?</span><span class="p">(</span><span class="s2">"-A OUTPUT -j App-OUTPUT"</span><span class="p">)</span>
    <span class="n">execute</span> <span class="s2">"connect App-OUTPUT to OUTPUT chain"</span> <span class="k">do</span>
      <span class="n">command</span> <span class="s2">"iptables -I OUTPUT -j App-OUTPUT"</span>
    <span class="k">end</span>
    <span class="n">iptables_modified</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="k">end</span>

<span class="k">else</span>
<span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span> <span class="s2">"No outbound ports specified to be opened"</span>
<span class="k">end</span>

<span class="k">if</span> <span class="n">iptables_modified</span>

  <span class="n">execute</span> <span class="s2">"save updated iptables"</span> <span class="k">do</span>
    <span class="n">command</span> <span class="s2">"/etc/init.d/iptables save"</span>
  <span class="k">end</span>

  <span class="n">service</span> <span class="s2">"iptables"</span> <span class="k">do</span>
    <span class="n">action</span> <span class="ss">:restart</span>
    <span class="n">ignore_failure</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">else</span>
  <span class="no">Chef</span><span class="o">::</span><span class="no">Log</span><span class="p">.</span><span class="nf">info</span> <span class="s2">"No changes made, not restarting iptables"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Would greatly appreciate any feedback/criticism from the Chef community. Thanks for reading.</p>
:ET