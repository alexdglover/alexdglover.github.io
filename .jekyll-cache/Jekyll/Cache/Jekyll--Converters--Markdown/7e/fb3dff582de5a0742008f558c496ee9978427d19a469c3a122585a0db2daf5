I"€<p>Recently ran into an issue at work where a single database was creating A LOT of trace files. 54 gigabytes of trace files to be specific. Well, this was a problem because the system disk was only 56GB, preventing me from building new databases. No problem, its a dev environment, I'll just delete the trace files that are older than 3 days. Except that the trace file naming convention wasn't consistent, so there was no way for me to delete the oldest files based only on file name.</p>
<p>What about the system timestamp on each file? It seemed like a good solution, but I didn't want to write a shell script to do something so minor. Then I got lucky on Google, and found this useful little gem:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /full/path/to/directory <span class="nt">-type</span> f <span class="nt">-mtime</span> +3 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="p">;</span>
</code></pre></div></div>

<p>I'll translate - it will find all files in a given directory that have system timestamps from 3 days ago or greater. Clarifying note - the system timestamp reflects when a file was created OR when it was last modified. For each file that it finds that matches that criteria, it will execute 'rm -f {file name}' and delete the file!</p>
<p>You can either use the full path to the directory you want to delete files in, or if you're already in that directory, simply enter a single period, like this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-mtime</span> +3 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="p">;</span>
</code></pre></div></div>

<p>In my case, I wanted to delete all files older than 3 days. If you wanted to keep 30 days worth of trace files, you would just enter +30 instead.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-mtime</span> +30 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="p">;</span>
</code></pre></div></div>

<p>Back to my example. I executed the above command and thenâ€¦ nothing. The Unix command line is often an unforgiving wasteland of lack of information. As I was deleting hundreds of thousands of trace files, the system hung for some time, and I couldnâ€™t tell what kind of progress, if any, was being made. Fortunately the command was working, it just wasnâ€™t obvious to me.</p>

<p>Luckily, the Unix â€˜findâ€™ binary allows you to call multiple command executions for each file that is found. To do so, terminate your first execution statement (the commands that follow â€˜-execâ€™) with â€˜;â€™ and add another -exec statement. Now, if we simply add another execution statement that calls a command to print a period (or any other string), weâ€™ll be able to see the progress in the terminal. The printf binary will work quite nicely for this:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-mtime</span> +3 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="p">;</span> <span class="nt">-exec</span> <span class="nb">printf</span> <span class="s2">"."</span> <span class="p">;</span>
</code></pre></div></div>

<p>One final tip. When using find-exec, you will occasionally get this error: <code class="language-plaintext highlighter-rouge">find: missing argument to '-exec'</code></p>

<p>This often means that the <code class="language-plaintext highlighter-rouge">-exec</code> statement is processing the semi-colon as part of the exec command, rather than terminating it. You can resolve this by escaping the semi-colon with a backslash:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-type</span> f <span class="nt">-mtime</span> +3 <span class="nt">-exec</span> <span class="nb">rm</span> <span class="nt">-f</span> <span class="o">{}</span> <span class="p">;</span> <span class="nt">-exec</span> <span class="nb">printf</span> <span class="s2">"."</span> <span class="se">\;</span>
</code></pre></div></div>

<p>Hope this helps!</p>
<p>Credit to <a href="http://www.justskins.com/forums/how-to-del-files-110106.html" target="_blank">Just Skins web development forum</a>Â and <a href="http://unstableme.blogspot.com/2009/09/execute-multiple-commands-with-exec-and.html" target="_blank">UnstableMe</a>Â for getting me started.</p>
:ET