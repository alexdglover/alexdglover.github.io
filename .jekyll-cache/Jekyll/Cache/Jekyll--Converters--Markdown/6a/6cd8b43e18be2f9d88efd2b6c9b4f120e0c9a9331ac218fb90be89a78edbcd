I"à<p>In <a title="Share Your Salary App Part 1" href="http://www.alexdglover.com/share-your-salary-app-part-1/" target="_blank">Part 1</a>, I covered the core classes for the Share Your Salary application. These classes covered my Model and Controllers in my quasi-MVC application. Now we're ready to expose those controller functions via a RESTful API.</p>
<p>For this project, I used the Fat Free Framework for both API routes and web page templating. To start, I simply downloaded and unzipped the <a href="https://github.com/bcosca/fatfree/archive/master.zip">F3 package</a>Â and added the contents to my shareyoursalary app directory. Next, I created a "classes" folder and added the PHP class files I created in Part 1. At this point, my folder structure looked like this:</p>
<ul>
<li>shareyoursalary/
<ul>
<li>classes/
<ul>
<li>database.php</li>
<li>survey.php</li>
</ul>
</li>
<li>config.ini</li>
<li>lib/</li>
<li>.htaccess</li>
<li>index.php</li>
<li>readme.md</li>
<li>ui/
<ul>
<li>css/</li>
<li>images/</li>
<li>layout.htm</li>
<li>userref.htm</li>
<li>welcome.htm</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Now to create the API functionality, IÂ createdÂ <a href="http://fatfreeframework.com/routing-engine" target="_blank">routes in F3</a>.Â F3 makes it really easy to make HTTP method-specific routes that then map to pages, classes, or specific functions. InÂ my case, I wanted to create routes for the various functions I created in the Survey class. To do this, we'll need to edit the index.php file in the root of the F3 directory. I left the existing code as-is, and added the following lines:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$f3</span><span class="o">-&gt;</span><span class="nf">route</span><span class="p">(</span><span class="s1">'GET /api/v1/survey/getByName/@name'</span><span class="p">,</span><span class="s1">'Survey-&gt;getByName'</span><span class="p">);</span>
<span class="nv">$f3</span><span class="o">-&gt;</span><span class="nf">route</span><span class="p">(</span><span class="s1">'POST /api/v1/survey/addResponse/@name'</span><span class="p">,</span><span class="s1">'Survey-&gt;addResponse'</span><span class="p">);</span>
<span class="nv">$f3</span><span class="o">-&gt;</span><span class="nf">route</span><span class="p">(</span><span class="s1">'POST /api/v1/survey/addSurvey'</span><span class="p">,</span><span class="s1">'Survey-&gt;addSurvey'</span><span class="p">);</span>
</code></pre></div></div>
<p>As you can see, the route syntax is:<br />
'METHOD /URL/PATH/@parameter', 'Class-&gt;functionName'.</p>
<p>RESTful APIs shouldÂ use certain methods based onÂ what you're doing to the object (e.g. if you're reading an object, use GET, if you're creating an object, use POST). Here's a quick breakdown for reference:</p>
<p>GET - Reading an object<br />
POST - Creating a new object (or overwriting an entire object)<br />
PUT - Updating attributes of an existing object (this should be an <a href="http://en.wikipedia.org/wiki/Idempotence" target="_blank">idempotent </a>operation)<br />
DELETE - I'll give you three guesses.</p>
<p>There are other methods, but these are the four mainÂ methods you'll encounter with APIs.</p>
<p><!--more--></p>
<p>Back to the F3 routes - you'll notice the @parameters in the URL. This tells F3 to pick up this portion of the URL and set it as a variable. You can then reference these parameters/variables in templates:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">echo</span> <span class="nv">$f3</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'PARAMS.parameterName'</span><span class="p">);</span>
</code></pre></div></div>
<p>or you can use them inside of your classes/functions:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Remember the route from index.php:</span>
<span class="c1">// $f3-&gt;route('GET /api/v1/survey/getByName/@name','Survey-&gt;getByName');</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">getByName</span><span class="p">(</span><span class="nv">$f3</span><span class="p">,</span><span class="nv">$args</span><span class="p">)</span> <span class="p">{</span>
<span class="mf">...</span>
 <span class="nv">$URLName</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">convertNameToURLName</span><span class="p">(</span><span class="nv">$args</span><span class="p">[</span><span class="s1">'name'</span><span class="p">]);</span>
<span class="mf">...</span>
</code></pre></div></div>
<p>OK, soÂ now I can hit <a href="http://shareyoursalary-alexdglover.rhcloud.com/api/v1/survey/getByName/test" target="_blank">http://shareyoursalary-alexdglover.rhcloud.com/api/v1/survey/getByName/test</a> in a browser, and I'll get some JSON output in response (unless 'test' doesn't exist, in which case I'll get an HTTP 200 OK response but no output).</p>
<p>What about the other two routes? If you try to hit them in a browser, you'll get a nasty HTTP 405 Error - Method Not Allowed. Remember, a browser by default is GETting web pages, and F3 enforces the HTTP method you've assigned. So how are we going to test our API routes? We could install some browser plugin or execute cURL commands against it... but let's do somethingÂ friendly for our API consumers, let's make it easy for people to explore the API. Enter Swagger UI.</p>
:ET